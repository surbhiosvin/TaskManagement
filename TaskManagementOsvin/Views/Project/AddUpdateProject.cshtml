@using TaskManagementOsvin.Models;
@model AddUpdateProjectModel
@{
    ViewBag.Title = "Add Update Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var clients = ViewBag.Clients as List<ClientModel>;
    var projectType = ViewBag.ProjectType as List<ProjectTypeModel>;
}
<div class="page-content">
    <!-- BEGIN PAGE HEADER-->
    <!-- BEGIN PAGE BAR -->
    <div class="page-bar">
        <ul class="page-breadcrumb">
            <li>
                <a href="javascript:">Home</a>
                <i class="fa fa-circle"></i> 
            </li>
            <li>
                <a href="javascript:">Add / Update Project</a>
            </li>
        </ul>
    </div>
    <!-- END PAGE BAR -->
    <!-- BEGIN PAGE TITLE-->
    <h1 class="page-title">
        Add / Update Project
    </h1>
    <!-- END PAGE TITLE-->
    <div class="row">
        <div class="col-md-12">
            <div class="portlet light portlet-fit portlet-form bordered">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="icon-layers font-green"></i>
                    <span class="caption-subject font-green sbold uppercase">Add / Update Project</span>
                    </div>
                </div>
                <div class="portlet-body">
                    <div class="col-md-12">
                        <div class="alert @ViewBag.Class">
                            @ViewBag.Message
                        </div>
                    </div>
                    @using (Html.BeginForm("AddUpdateProject", "Project", FormMethod.Post, new { enctype = "multipart/form-data",@id = "AddUpdateProject" }))
                    {
                        @Html.HiddenFor(x=>x.ProjectId)
                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="single-append-text" class="control-label">Select Client</label>
                                    <div class="input-group select2-bootstrap-append">
                                        @Html.DropDownListFor(x => x.ClientId, new SelectList(clients, "ClientId", "FullName"), "----Select Client-----", new { @id= "single-append-text", @class = "form-control select2-allow-clear" })
                                        <span class="input-group-btn">
                                            <button class="btn btn-default" type="button" data-select2-open="single-append-text">
                                                <span class="glyphicon glyphicon-search"></span>
                                            </button>
                                        </span>
                                    </div>
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.ClientId)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                               <div class="form-group">
                                   <label>Project Type</label>
                                   @Html.DropDownListFor(x => x.ProjectTypeId, new SelectList(projectType, "TypeId", "TypeName"), "Select Project Type", new{@class = "form-control"})
                                   <div class="text-danger">
                                       @Html.ValidationMessageFor(x => x.ProjectTypeId)
                                   </div>
                               </div>
                            </div>
                        </div>
                        <div class="col-md-12" style="display:none" id="HourlyDiv">
                            <div class="col-md-6">
                                <div class="form-group">
                                    
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Hourly Rate</label>
                                    @Html.TextBoxFor(x => x.HourlyRate, new { @class = "form-control", @placeholder = "Hourly Rate" })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.HourlyRate)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Project Title </label>
                                    @Html.TextBoxFor(x => x.ProjectTitle, new { @class = "form-control", @placeholder = "Project Title" })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x=>x.ProjectTitle)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Project URL</label>
                                    @Html.TextBoxFor(x => x.ProjectUrl, new { @class = "form-control", @placeholder = "Project URL" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <label>Description Document</label> <br />
                                <div class="fileinput fileinput-new" data-provides="fileinput">
                                    <div class="input-group input-large">
                                        <div class="form-control uneditable-input input-fixed input-medium" data-trigger="fileinput">
                                            <i class="fa fa-file fileinput-exists"></i>&nbsp;
                                            <span class="fileinput-filename"> </span>
                                        </div>
                                        <span class="input-group-addon btn default btn-file">
                                            <span class="fileinput-new"> Select file </span>
                                            <span class="fileinput-exists"> Change </span>
                                            @Html.TextBoxFor(x => x.UploadDetailsDocumentFile, new { @type = "File" })
                                        </span>
                                        <a href="javascript:;" class="input-group-addon btn red fileinput-exists" data-dismiss="fileinput"> Remove </a>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label> Attach Additional Document</label> <br />
                                    <div class="fileinput fileinput-new" data-provides="fileinput">
                                        <div class="input-group input-large">
                                            <div class="form-control uneditable-input input-fixed input-medium" data-trigger="fileinput">
                                                <i class="fa fa-file fileinput-exists"></i>&nbsp;
                                                <span class="fileinput-filename"> </span>
                                            </div>
                                            <span class="input-group-addon btn default btn-file">
                                                <span class="fileinput-new"> Select file </span>
                                                <span class="fileinput-exists"> Change </span>
                                                @Html.TextBoxFor(x => x.UploadDocumentFile, new { @type = "File" })
                                            </span>
                                            <a href="javascript:;" class="input-group-addon btn red fileinput-exists" data-dismiss="fileinput"> Remove </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Proposed Start Date</label>
                                    @Html.TextBoxFor(x => x.StartDate, new { @class = "form-control datepicker", @placeholder = "Start Date" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Estimate End Date</label>
                                    @Html.TextBoxFor(x => x.EndDate, new { @class = "form-control datepicker", @placeholder = "End Date" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Estimate Hours </label>
                                    @Html.EditorFor(x => x.EstimateHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Estimate Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.EstimateHours)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Assigned Hours</label>
                                    @Html.EditorFor(x => x.AssignedHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Assigned Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.AssignedHours)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Developer Coding Hours</label>
                                    @Html.EditorFor(x => x.developerCodinghours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Developer Coding Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.developerCodinghours)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Webservice Hours</label>
                                    @Html.EditorFor(x => x.developerCodinghours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Webservice Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.WebserviceHours)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Estimate Design Hours</label>
                                    @Html.EditorFor(x => x.EstimateDesignHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Estimate Design Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.EstimateDesignHours)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>SEO Hours </label>
                                    @Html.EditorFor(x => x.SEOHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "SEO Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.EstimateDesignHours)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Analysis Hours</label>
                                    @Html.EditorFor(x => x.AnalysisHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Analysis Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.AnalysisHours)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Client Communication Hours</label>
                                    @Html.EditorFor(x => x.ClientCommunicationHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Client Communication Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.ClientCommunicationHours)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>SetUp Hours</label>
                                    @Html.EditorFor(x => x.SetUpHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "SetUp Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.SetUpHours)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Maintainence Hours</label>
                                    @Html.EditorFor(x => x.MaintainenceHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Maintainence Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.MaintainenceHours)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Network Support Hours</label>
                                    @Html.EditorFor(x => x.NetworkSupportHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Network Support Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.NetworkSupportHours)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Quality Analyst Hours</label>
                                    @Html.EditorFor(x => x.QualityAnalystHours, new { htmlAttributes = new { @class = "form-control", @placeholder = "Quality Analyst Hours" } })
                                    <div class="text-danger">
                                        @Html.ValidationMessageFor(x => x.QualityAnalystHours)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                               <div class="col-md-offset-3 col-md-9">
                                   <input type="submit" name="name" value="Submit" class="btn btn-lg btn-success" />
                                   <input type="button" name="cancel" value="Cancel" class="btn btn-lg btn-default" />
                               </div>
                                <div class="clearfix"></div>
                            </div>
                        </div>
                    }
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        ShowHideDiv();
        //$.validator.setDefaults({ ignore: null });
        //var items = [];
        //$.ajax({
        //    type: "GET",
        //    url: "/api/Employee/GetEmployees",
        //    content: "application/json;",
        //    dataType: "json",
        //    success: function (data, textStatus, xhr) {
        //        for (var i = 0; i < data.length; i++) {
        //            items.push(data[i].EmployeeName);
        //        }
        //    }
        //});
        //$('#upworkprofiles').tagsinput({
        //    typeahead: {
        //        source: items,
        //        afterSelect: () => {
        //            $("#upworkprofiles").tagsinput('input').val('');
        //        }
        //    },
        //    //freeInput: false,
        //    tagClass: 'label label-info'
        //});
    });

    $('#ProjectTypeId').change(function () {
        ShowHideDiv();
    })

    function ShowHideDiv() {
        var value = $('#ProjectTypeId option:selected').text().toLowerCase();
        if (value.indexOf("hourly") >= 0) {
            $('#HourlyDiv').show();
        }
        else {
            $('#HourlyRate').val('');
            $('#HourlyDiv').hide();
        }
    }
</script>